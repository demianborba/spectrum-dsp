{
  "dsp_spec_version": "0.0.1",
  "last_updated_by": "Demian Borba",
  "last_updated": "2020-09-24T06:08:46.497Z",
  "entities": [
    {
      "class": "doc",
      "description": "# Meet Spectrum,<br>Adobe’s design system\n\nSpectrum provides components and tools to help product teams work more efficiently, and to make Adobe’s applications more cohesive.\n\n\n## Principles\nGet to know our foundational thinking and how we put it into action across our design system.\n\n[Learn about our principles](https://spectrum.adobe.com/page/principles/)\n\n## Resources\nDownload resources to help you design faster and with more precision.\n\n- [Download Adobe XD plugin](https://spectrum.adobe.com/page/spectrum-xd-plugin/)\n- [Download UI kits](https://spectrum.adobe.com/page/ui-kits/)\n- [Download fonts](https://spectrum.adobe.com/page/fonts/)\n- [Download icons](https://spectrum.adobe.com/page/icons/)\n\n## Implementations\nUse our open-source implementations, in partnership with the detailed usage guidelines here.\n\n- [Explore Spectrum CSS](https://opensource.adobe.com/spectrum-css)\n- [Explore React Spectrum](https://react-spectrum.adobe.com/)",
      "id": "D5BB331A-2483-4CC5-BCB7-82FFDC412B36",
      "name": "1. Introduction",
      "tags": [],
      "type": "page",
      "last_updated": "2021-03-09T17:26:37.469Z",
      "last_updated_by": "Demian Borba"
    },
    {
      "class": "doc",
      "description": "## Rational\nSpectrum is based on real-world situations. Every component, pattern, and principle is informed by research and thoughtful testing.\n\n## Human\nSpectrum places customer needs first. It's deeply committed to a high standard of accessibility, honesty, and respect for user attention.\n\n## Focused\nSpectrum strives to deliver what’s needed, when it’s needed. No unnecessary decoration or irrelevant content.\n<br/>\n\n#### Our principles in action\n<hr>\n\n## For all platforms\n\nWe believe that people should have a high quality experience that effortlessly scales across platforms.\n\nSpectrum considers all platforms — for both desktop and mobile — from the ground up. We recognize that people work across many different products and often need to context switch, so our scale system accounts for better legibility and easier UI interactions to set a foundation for consistent experiences across devices.\n\n[Learn about platform scale](https://spectrum.adobe.com/page/platform-scale/)\n\n## For everyone\n\nWe believe in building for the widest audience possible.\n\nSpectrum is designed to be clearly readable, intuitive to use, and mindful of those who require alternative input peripherals or screen readers. Everything in our system — from color and type to interaction and language — is built to be compliant with industry standards.\n\n- [Learn about inclusive design](https://spectrum.adobe.com/page/inclusive-design/)\n- [Learn about international design](https://spectrum.adobe.com/page/international-design/)\n- [Learn about bi-directionality](https://spectrum.adobe.com/page/bi-directionality/)\n\n## Evolving and transparent\n\nWe believe in a system that’s visible, flexible, and evolves.\n\nSpectrum is built with transparency at its core. Everything in our system has its own individual versioning, a list of open issues, and a design checklist that communicate overall status. We want to consistently communicate what we’re working on, set clear expectations, and build trust with our users so that we can strengthen the relationships that help products and industries grow.\n\n[Check out what’s new](https://spectrum.adobe.com/page/whats-new/)\n\n## Built by a community\n\nWe believe that our system gets its strength from everyone.\n\nSpectrum connects many different talents, viewpoints, and skills into something that benefits all Adobe products. Anyone at Adobe can contribute to a collection of design elements that are being considered as additions to the design system.",
      "id": "1eb6a93a-d31b-48f7-992d-89c15f8f3215",
      "name": "2. Principles",
      "tags": [],
      "type": "page",
      "last_updated": "2021-03-09T17:28:14.152Z",
      "last_updated_by": "Demian Borba"
    },
    {
      "id": "0550b6bd-d91b-48db-8481-6c29f874ddc5",
      "class": "doc",
      "type": "page",
      "name": "3. Design tokens",
      "description": "Design tokens are design decisions, represented as data, that ensure systematically unified and cohesive product experiences.\n\n## Introduction\n\n#### What are design tokens?\n\nDesign tokens are all the values needed to construct and maintain a design system — spacing, color, typography, object styles, animation, etc. — represented as data. These can represent anything defined by design: a color as a RGB value, an opacity as a number, an animation ease as Bezier coordinates. They’re used in place of hard-coded values in order to ensure flexibility and unity across all product experiences.\n\nDesign tokens are directly integrated into our component libraries and UI kits. They cover the various options of platform scales, color themes, component states, and more.\n\n## Design token types\n\nThe following types of design tokens are the building blocks and design decisions that make up the Spectrum design language:\n\n#### Global tokens\n\nGlobal tokens are the primitive values in our design language, represented by context-agnostic names. Our color palette, animation, typography, and dimension values are all recorded as global tokens. These can be directly used, and are inherited by all other token types.\n\n#### Alias tokens\n\nAlias tokens relate to a specific context or abstraction. Aliases help communicate the intended purpose of a token, and are effective when a value with a single intent will appear in multiple places.\n\n#### Component-specific tokens\n\nComponent-specific tokens are an exhaustive representation of every value associated with a component. They often inherit from alias tokens, but are named in a way that allows engineering teams to be as specific as possible in applying tokens in component development.\n\n## Design token types\n\n#### Size tokens\n\nGlobal size tokens are used for specifying dimensions and spacing for every Spectrum component. Since Spectrum supports two platform scales, token values automatically adjust between scales, allowing for a single token to be used for each.\n\nSize tokens are anchored around a base value. Each token’s number represents a percentage relative to the base value. For example, size-100 is 100% of the base value, size-400 is 400%, and so on.\n\n| TOKEN NAME | DESKTOP SCALE | MOBIE SCALE |\n|---|:---|:---|\n| size-0 | 0 px | 0 px |\n| size-10 | 1 px | 1 px |\n| size-25 | 2 px | 2 px |\n| size-40 | 3 px | 4 px |\n| size-50 | 4 px | 5 px |\n| size-65 | 5 px | 6 px |\n| size-75 | 6 px | 8 px |\n| size-85 | 7 px | 9 px |\n| size-100 | **8 px (base size)** | **10 px (base size)** |\n| size-115 | 9 px | 11 px |\n| size-125 | 10 px | 13 px |\n| size-130 | 11 px | 14 px |\n| size-150 | 12 px | 15 px |\n| size-160 | 13 px | 16 px |\n| size-175 | 14 px | 18 px |\n| size-200 | 16 px | 20 px |\n\n*Not all global size tokens are displayed in this chart.*\n\n#### Static size tokens\n\nStatic size tokens are persistent across each platform scale. Global size tokens change at every scale in order to support overall scaling of an application and its components. Static size tokens are used for properties such as border thickness, which are meant to remain the same across platform scales.\n\n|TOKEN NAME | DESKTOP AND MOBILE SCALE |\n|---|:---|\n| static-size-0 | 0 px |\n| static-size-10 | 1 px |\n| static-size-25 | 2 px |\n| static-size-40 | 3 px |\n| static-size-50 | 4 px |\n| static-size-65 | 5 px |\n| static-size-75 | 6 px |\n| static-size-85 | 7 px |\n| static-size-100 | 8 px |\n| static-size-115 | 9 px |\n| static-size-125 | 10 px |\n| static-size-130 | 11 px |\n| static-size-150 | 12 px |\n| static-size-160 | 13 px |\n| static-size-175 | 14 px |\n| static-size-200 | 16 px |\n\n*Not all static size tokens are displayed in this chart.*\n\n## Usage guidelines\n\n#### Use global tokens sparingly\n\nGlobal tokens are the easiest to reference for the various attributes in Spectrum. While they’re the building blocks of Spectrum, they’re also the token type that is the least tied to the logic of our design language. Only use global tokens when there are no aliases for your use case.\n\n#### Use aliases wherever they can apply\n\nAlias tokens are the recommended type to use when building your product with design tokens. Aliases are like a “Rosetta Stone” for understanding Spectrum, and they help to associate meaning, context, and/or intent to the design tokens you’re applying to your product. Using aliases is a good way to ensure that your product can evolve alongside Spectrum as the design system evolves, and to minimize future maintenance for your product.\n\n#### Use component-specific tokens for their respective component\n\nWhen building Spectrum verified components, use component-specific tokens. This ensures that as a component’s design evolves, you won’t have to retrace any higher-level design decisions that informed the updates. It’s not recommended to use component-specific tokens interchangeably with other components, unless one is derivative of the other.",
      "tags": [],
      "last_updated": "2021-03-09T17:28:56.353Z",
      "last_updated_by": "Demian Borba"
    }
  ]
}